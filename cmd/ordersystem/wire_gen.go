// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/NayronFerreira/cleanArq_challenge/internal/entity"
	"github.com/NayronFerreira/cleanArq_challenge/internal/infra/database"
	"github.com/NayronFerreira/cleanArq_challenge/internal/infra/event"
	"github.com/NayronFerreira/cleanArq_challenge/internal/infra/web"
	"github.com/NayronFerreira/cleanArq_challenge/internal/usecase"
	"github.com/NayronFerreira/cleanArq_challenge/pkg/events"
	"github.com/google/wire"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func NewCreateOrderUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.CreateOrderUseCase {
	orderRepository := database.NewOrderRepository(db)
	orderCreated := event.NewOrderCreated()
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, orderCreated, eventDispatcher)
	return createOrderUseCase
}

func NewListOrderUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.ListOrderUseCase {
	orderRepository := database.NewOrderRepository(db)
	orderList := event.NewOrderList()
	listOrderUseCase := usecase.NewListOrderUseCase(orderRepository, orderList, eventDispatcher)
	return listOrderUseCase
}

func NewGetOrderByIDUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.GetOrderByIDUseCase {
	orderRepository := database.NewOrderRepository(db)
	getOrderByID := event.NewGetOrderByID()
	getOrderByIDUseCase := usecase.NewGetOrderByIDUseCase(orderRepository, getOrderByID, eventDispatcher)
	return getOrderByIDUseCase
}

func NewUpdateOrderUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.UpdateOrderUseCase {
	orderRepository := database.NewOrderRepository(db)
	orderUpdate := event.NewOrderUpdate()
	updateOrderUseCase := usecase.NewUpdateOrderUseCase(orderRepository, orderUpdate, eventDispatcher)
	return updateOrderUseCase
}

func NewWebOrderHandler(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *web.WebOrderHandler {
	orderRepository := database.NewOrderRepository(db)
	orderCreated := event.NewOrderCreated()
	webOrderHandler := web.NewWebOrderHandler(eventDispatcher, orderRepository, orderCreated)
	return webOrderHandler
}

func NewWebListOrdersHandler(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *web.WebListOrdersHandler {
	orderRepository := database.NewOrderRepository(db)
	orderList := event.NewOrderList()
	webListOrdersHandler := web.NewWebListOrdersHandler(orderRepository, orderList, eventDispatcher)
	return webListOrdersHandler
}

func NewWebGetOrderByIDHandler(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *web.WebGetOrderByIDHandler {
	orderRepository := database.NewOrderRepository(db)
	getOrderByID := event.NewGetOrderByID()
	webGetOrderByIDHandler := web.NewWebGetOrderByIDHandler(eventDispatcher, orderRepository, getOrderByID)
	return webGetOrderByIDHandler
}

func NewWebUpdateOrderHandler(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *web.WebUpdateOrderHandler {
	orderRepository := database.NewOrderRepository(db)
	orderUpdate := event.NewOrderUpdate()
	webUpdateOrderHandler := web.NewWebUpdateOrderHandler(eventDispatcher, orderRepository, orderUpdate)
	return webUpdateOrderHandler
}

// wire.go:

var setOrderRepositoryDependency = wire.NewSet(database.NewOrderRepository, wire.Bind(new(entity.OrderRepositoryInterface), new(*database.OrderRepository)))

var setEventDispatcherDependency = wire.NewSet(events.NewEventDispatcher, event.NewOrderCreated, event.NewOrderList, event.NewGetOrderByID, event.NewOrderUpdate, wire.Bind(new(events.EventInterface), new(*event.OrderCreated)), wire.Bind(new(events.EventInterface), new(*event.OrderList)), wire.Bind(new(events.EventInterface), new(*event.GetOrderByID)), wire.Bind(new(events.EventInterface), new(*event.OrderUpdate)), wire.Bind(new(events.EventDispatcherInterface), new(*events.EventDispatcher)))

var setOrderCreatedEvent = wire.NewSet(event.NewOrderCreated, wire.Bind(new(events.EventInterface), new(*event.OrderCreated)))

var setOrderListedEvent = wire.NewSet(event.NewOrderList, wire.Bind(new(events.EventInterface), new(*event.OrderList)))

var setGetOrderByIDEvent = wire.NewSet(event.NewGetOrderByID, wire.Bind(new(events.EventInterface), new(*event.GetOrderByID)))

var setUpdateOrderEvent = wire.NewSet(event.NewOrderUpdate, wire.Bind(new(events.EventInterface), new(*event.OrderUpdate)))
